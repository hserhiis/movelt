rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    match /users/{userId} {
      allow read, update: if isOwner(userId);
      allow create: if request.auth != null && request.auth.uid == userId;
    }
    
    match /driverProfiles/{driverId} {
      allow read: if true;
      allow create, update: if isOwner(driverId) && getUserRole(driverId) == 'driver';
    }

    match /bookings/{bookingId} {
      // Clients create bookings for themselves
      allow create: if isOwner(request.resource.data.clientId) && getUserRole(request.resource.data.clientId) == 'client';
      
      // Allow the assigned driver or owning client to read the booking
      allow read: if isOwner(resource.data.driverId) || isOwner(resource.data.clientId);
                       
      // Allow updates under specific conditions
      allow update: if 
        // A client can update their booking ONLY if they are changing the status to 'cancelled'
        (isOwner(resource.data.clientId) && request.resource.data.status == 'cancelled') || 
        // A driver can update any part of a booking assigned to them (e.g. changing status)
        (isOwner(resource.data.driverId));
                       
      allow delete: if isOwner(resource.data.clientId);
    }
  }
}
