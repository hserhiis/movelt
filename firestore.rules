
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    match /users/{userId} {
      allow read, update: if isOwner(userId);
      allow create: if request.auth != null && request.auth.uid == userId;
    }
    
    match /driverProfiles/{driverId} {
      // Anyone can read driver profiles (for the main page)
      allow read: if true;
      // Only the owner who is a driver can write to their profile.
      allow create, update: if isOwner(driverId) && getUserRole(driverId) == 'driver';
    }

    match /bookings/{bookingId} {
      allow create: if isOwner(request.resource.data.clientId) && getUserRole(request.resource.data.clientId) == 'client';
      
      // Allow any logged-in user to read booking data.
      // This is necessary for the homepage calendar to check for available time slots.
      // WARNING: This makes all booking details (client name, phone, etc.) visible to any logged-in user.
      // For a production app, this should be replaced with a more secure solution like a separate "availability" collection.
      allow read: if request.auth.uid != null;
      
      // A client or driver can update their own bookings.
      allow update: if isOwner(resource.data.clientId) || isOwner(resource.data.driverId);
                       
      // A client can delete their own booking.
      allow delete: if isOwner(resource.data.clientId);
    }
  }
}
